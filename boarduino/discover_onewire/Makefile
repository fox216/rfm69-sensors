# Makefile for building Arduino Projects (fox216)
# Change Log
# Updated 08/06/2012 for JeeNode
# Updated to support Moteino Build
# Initial version testing with Arduino 1.0.5 
# updating makefile for version 1.8.0

TARGET = $(notdir $(CURDIR))
INSTALL_DIR = /swpkg/avr/arduino
AVR_PORT ?= ttyLPL 
PORT = /dev/$(AVR_PORT)
AVRDUDE_PROGRAMMER = arduino
MCU = atmega328p
F_CPU = 16000000
UPLOAD_RATE = 115200

VERSION=100
ARDUINO = $(INSTALL_DIR)/hardware/arduino/avr/cores/arduino
AVR_TOOLS_PATH = $(INSTALL_DIR)/hardware/tools/avr/bin
# Arduino Library Locations
AVR_LIB_CORE = $(INSTALL_DIR)/hardware/arduino/avr/libraries
AVR_LIB_ADDON = $(INSTALL_DIR)/libraries
C_MODULES =  \
$(ARDUINO)/hooks.c \
$(ARDUINO)/wiring_pulse.c \
$(ARDUINO)/wiring_analog.c \
$(ARDUINO)/wiring.c \
$(ARDUINO)/wiring_digital.c \
$(ARDUINO)/WInterrupts.c \
$(ARDUINO)/wiring_shift.c \
# end of C_MODULES

# Include Core and Add-on Libraries
CXX_MODULES = \
$(ARDUINO)/Tone.cpp \
$(ARDUINO)/main.cpp \
$(ARDUINO)/WMath.cpp \
$(ARDUINO)/Print.cpp \
$(ARDUINO)/HardwareSerial.cpp \
$(ARDUINO)/HardwareSerial0.cpp \
$(ARDUINO)/HardwareSerial1.cpp \
$(ARDUINO)/HardwareSerial2.cpp \
$(ARDUINO)/HardwareSerial3.cpp \
$(ARDUINO)/Stream.cpp \
$(AVR_LIB_ADDON)/RFM69/RFM69.cpp \
$(AVR_LIB_CORE)/SPI/src/SPI.cpp \
$(AVR_LIB_ADDON)/ArduinoCap/CapacitiveSensor.cpp \
$(AVR_LIB_ADDON)/FastLED/FastLED.cpp \
$(AVR_LIB_ADDON)/FastLED/colorpalettes.cpp \
$(AVR_LIB_ADDON)/FastLED/hsv2rgb.cpp \
$(AVR_LIB_ADDON)/FastLED/colorutils.cpp \
$(AVR_LIB_ADDON)/FastLED/lib8tion.cpp \
$(AVR_LIB_ADDON)/IRremote/IRremote.cpp \
$(AVR_LIB_ADDON)/IRremote/irRecv.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_NEC.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_Sony.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_Sanyo.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_Mitsubishi.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_JVC.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_LG.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_Whynter.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_Denon.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_RC5_RC6.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_Panasonic.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_Samsung.cpp \
$(AVR_LIB_ADDON)/IRremote/ir_Aiwa.cpp \
$(AVR_LIB_ADDON)/IRremote/irSend.cpp \
$(AVR_LIB_ADDON)/OneWire/OneWire.cpp \
$(AVR_LIB_ADDON)/DS2438/DS2438.cpp \
$(AVR_LIB_ADDON)/DallasEPROM/DallasEPROM.cpp \


# Header file includes
ARDUINO_LIB_INCLUDES = \
-I$(AVR_LIB_CORE)/SPI/src \
-I$(AVR_LIB_CORE)/EEPROM/src \
-I$(AVR_LIB_ADDON)/RFM69 \
-I$(AVR_LIB_ADDON)/ArduinoJson \
-I$(AVR_LIB_ADDON)/ArduinoCap \
-I$(AVR_LIB_ADDON)/FastLED \
-I$(AVR_LIB_ADDON)/IRremote \
-I$(AVR_LIB_ADDON)/OneWire \
-I$(AVR_LIB_ADDON)/DS2438 \
-I$(AVR_LIB_ADDON)/DallasEPROM \


# -I$(AVR_LIB_ADDON)/FastLED/platforms/avr \
# -I$(AVR_LIB_ADDON)/FastLED/lib8tion \

CXX_APP = applet/$(TARGET).cpp
MODULES = $(C_MODULES) $(CXX_MODULES)
SRC = $(C_MODULES)
CXXSRC = $(CXX_MODULES) $(CXX_APP)
FORMAT = ihex

# Name of this Makefile (used for "make depend").
MAKEFILE = Makefile

DEBUG =
OPT = s

# Place -D or -U options here
CDEFS = -DF_CPU=$(F_CPU)L -DARDUINO=$(VERSION)
CXXDEFS = -DF_CPU=$(F_CPU)L -DARDUINO=$(VERSION)

AVR_HEADERS = $(INSTALL_DIR)/hardware/arduino/avr/variants/standard/

# Place -I options here
CINCS = -I$(CURDIR) -I$(ARDUINO) $(ARDUINO_LIB_INCLUDES) -I$(AVR_HEADERS)
CXXINCS = -I$(CURDIR) -I$(ARDUINO) $(ARDUINO_LIB_INCLUDES) -I$(AVR_HEADERS)

CDEBUG = -g$(DEBUG)
#CWARN = -Wall -Wstrict-prototypes
#CWARN = -Wall   # show all warnings
CWARN = -w      # suppress all warnings
####CTUNING = -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
CTUNING = -ffunction-sections -fdata-sections
CXXTUNING = -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics
#CEXTRA = -Wa,-adhlns=$(<:.c=.lst)

CFLAGS = $(CDEBUG) -O$(OPT) $(CWARN) $(CTUNING) $(CDEFS) $(CINCS) $(CSTANDARD) $(CEXTRA)
CXXFLAGS = $(CDEBUG) -O$(OPT) $(CWARN) $(CXXTUNING) $(CDEFS) $(CINCS)
#ASFLAGS = -Wa,-adhlns=$(<:.S=.lst),-gstabs
LDFLAGS = -O$(OPT) -lm -Wl,--gc-sections

# Programming support using avrdude. Settings and variables.
AVRDUDE = $(AVR_TOOLS_PATH)/avrdude
AVRDUDE_PORT = $(PORT)
AVRDUDE_WRITE_FLASH = -U flash:w:applet/$(TARGET).hex
AVRDUDE_FLAGS = -F -C $(INSTALL_DIR)/hardware/tools/avr/etc/avrdude.conf \
-p $(MCU) -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER) \
-b $(UPLOAD_RATE)

# Program settings
CC = $(AVR_TOOLS_PATH)/avr-gcc
CXX = $(AVR_TOOLS_PATH)/avr-g++
LD = $(AVR_TOOLS_PATH)/avr-gcc
OBJCOPY = $(AVR_TOOLS_PATH)/avr-objcopy
OBJDUMP = $(AVR_TOOLS_PATH)/avr-objdump
AR  = $(AVR_TOOLS_PATH)/avr-ar
SIZE = $(AVR_TOOLS_PATH)/avr-size
NM = $(AVR_TOOLS_PATH)/avr-nm
REMOVE = rm -f
MV = mv -f

# Define all object files.
OBJ = $(SRC:.c=.o) $(CXXSRC:.cpp=.o) $(ASRC:.S=.o)
OBJ_MODULES = $(C_MODULES:.c=.o) $(CXX_MODULES:.cpp=.o)

# Define all listing files.
LST = $(ASRC:.S=.lst) $(CXXSRC:.cpp=.lst) $(SRC:.c=.lst)

ALL_CFLAGS = $(CFLAGS) -mmcu=$(MCU)
ALL_CXXFLAGS = $(CXXFLAGS) -mmcu=$(MCU)
ALL_ASFLAGS = -x assembler-with-cpp $(ASFLAGS) -mmcu=$(MCU)
ALL_LDFLAGS = $(LDFLAGS) -mmcu=$(MCU)

# Default target.
all: clean applet_files build sizeafter upload



build: elf hex

#applet_files: $(TARGET).pde
applet/$(TARGET).cpp: $(TARGET).cc
	# Here is the "preprocessing".
	# It creates a .cpp file based with the same name as the .pde file.
	# On top of the new .cpp file comes the WProgram.h header.
	# and prototypes for setup() and Loop()
	# Then the .cpp file will be compiled. Errors during compile will
	# refer to this new, automatically generated, file.
	# Not the original .pde file you actually edit...
	test -d applet || mkdir applet
	echo '#include "Arduino.h"' > applet/$(TARGET).cpp
	echo 'void setup();' >> applet/$(TARGET).cpp
	echo 'void loop();' >> applet/$(TARGET).cpp
	cat $(TARGET).cc >> applet/$(TARGET).cpp

elf: applet/$(TARGET).elf
hex: applet/$(TARGET).hex
eep: applet/$(TARGET).eep
lss: applet/$(TARGET).lss
sym: applet/$(TARGET).sym

# Program the device.  
upload: applet/$(TARGET).hex
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH)


	# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) applet/$(TARGET).hex
ELFSIZE = $(SIZE)  applet/$(TARGET).elf
sizebefore:
	@if [ -f applet/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(HEXSIZE); echo; fi

sizeafter:
	@if [ -f applet/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_AFTER); $(HEXSIZE); echo; fi


# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.
COFFCONVERT=$(OBJCOPY) --debugging \
--change-section-address .data-0x800000 \
--change-section-address .bss-0x800000 \
--change-section-address .noinit-0x800000 \
--change-section-address .eeprom-0x810000


coff: applet/$(TARGET).elf
	$(COFFCONVERT) -O coff-avr applet/$(TARGET).elf $(TARGET).cof


extcoff: $(TARGET).elf
	$(COFFCONVERT) -O coff-ext-avr applet/$(TARGET).elf $(TARGET).cof


.SUFFIXES: .elf .hex .eep .lss .sym

.elf.hex:
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@

.elf.eep:
	$(OBJCOPY) -O $(FORMAT) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--no-change-warnings \
	--change-section-lma .eeprom=0 $< $@

# Create extended listing file from ELF output file.
.elf.lss:
	$(OBJDUMP) -h -S $< > $@

# Create a symbol table from ELF output file.
.elf.sym:
	$(NM) -n $< > $@

	# Link: create ELF output file from library.
#applet/$(TARGET).elf: $(TARGET).pde applet/core.a
applet/$(TARGET).elf: applet/$(TARGET).o applet/core.a
	$(LD) $(ALL_LDFLAGS) -o $@ applet/$(TARGET).o applet/core.a

applet/core.a: $(OBJ_MODULES)
	@for i in $(OBJ_MODULES); do echo $(AR) rcs applet/core.a $$i; $(AR) rcs applet/core.a $$i; done

# Compile: create object files from C++ source files.
.cpp.o:
	$(CXX) -c $(ALL_CXXFLAGS) $< -o $@

# Compile: create object files from C source files.
.c.o:
	$(CC) -c $(ALL_CFLAGS) $< -o $@

# Compile: create assembler files from C source files.
.c.s:
	$(CC) -S $(ALL_CFLAGS) $< -o $@

# Assemble: create object files from assembler source files.
.S.o:
	$(CC) -c $(ALL_ASFLAGS) $< -o $@

# Automatic dependencies
%.d: %.c
	$(CC) -M $(ALL_CFLAGS) $< | sed "s;$(notdir $*).o:;$*.o $*.d:;" > $@

%.d: %.cpp
	$(CXX) -M $(ALL_CXXFLAGS) $< | sed "s;$(notdir $*).o:;$*.o $*.d:;" > $@

# Target: clean project.
clean:
	$(REMOVE) applet/$(TARGET).hex applet/$(TARGET).eep applet/$(TARGET).cof applet/$(TARGET).elf \
	applet/$(TARGET).map applet/$(TARGET).sym applet/$(TARGET).lss applet/core.a \
	$(OBJ) $(LST) $(SRC:.c=.s) $(SRC:.c=.d) $(CXXSRC:.cpp=.s) $(CXXSRC:.cpp=.d)

.PHONY:	all build elf hex eep lss sym program coff extcoff clean applet_files sizebefore sizeafter

#include $(SRC:.c=.d)
#include $(CXXSRC:.cpp=.d)
